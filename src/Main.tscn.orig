[gd_scene load_steps=15 format=2]

[ext_resource path="res://big-rock.dae" type="PackedScene" id=1]
[ext_resource path="res://medium-rock.dae" type="PackedScene" id=2]
[ext_resource path="res://small-rock.dae" type="PackedScene" id=3]
[ext_resource path="res://Ocean.gd" type="Script" id=4]
[ext_resource path="res://ocean-normal.jpg" type="Texture" id=5]
[ext_resource path="res://checkerboard.png" type="Texture" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

<<<<<<< Updated upstream
void vertex() {
	
=======
uniform vec2 amplitude = vec2(0.2, 0.1);
uniform vec2 frequency = vec2(3.0, 2.5);
uniform vec2 time_factor = vec2(2.0, 3.0);
uniform float waterlevel = 1.0;
uniform float small_waveheight = 1.0;
uniform float large_waveheight = 1.0;
uniform sampler2D two_d_noise;

uniform float edge_pattern_scale = 1.0;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale = 0.1;
uniform vec4 color : hint_color;
uniform float wave_height = 0.3;

// random/hash function              
float hash( float n )
{
  return fract(cos(n)*41415.92653);
}

float noise_2d(vec2 p) {
//  return fract(sin(dot(p * 17.17, vec2(14.91, 67.31))) * 4791.9511);
	return textureLod(two_d_noise, p*vec2(1.0/256.0), 0.0).x;
//	return 1.0;
}

// 3d noise function
float noise( in vec3 x )
{
  vec3 p  = floor(x);
  vec3 f  = smoothstep(0.0, 1.0, fract(x));
  float n = p.x + p.y*57.0 + 113.0*p.z;

  return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),
    mix(mix( hash(n+113.0), hash(n+114.0),f.x),
    mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}


// Fractional Brownian motion
float fbm( vec2 p )
{
mat2 m2 = mat2(vec2(1.6,-1.2),vec2(1.2,1.6));
  float f = 0.5000*noise_2d( p ); p = m2*p;
  f += 0.2500*noise_2d( p ); p = m2*p;
  f += 0.1666*noise_2d( p ); p = m2*p;
  f += 0.0834*noise_2d( p );
  return f;
}

// this calculates the water as a height of a given position
float water( vec2 p, float time )
{
mat2 m2 = mat2(vec2(1.6,-1.2),vec2(1.2,1.6));
  float height = waterlevel;

  vec2 shift1 = 0.001*vec2( time*160.0*2.0, time*120.0*2.0 );
  vec2 shift2 = 0.001*vec2( time*190.0*4.0, -time*130.0*2.0 );

  // coarse crossing 'ocean' waves...
  float wave = 0.0;
  wave += sin(p.x*1.021  + shift2.x)*4.5;
  wave += sin(p.x*1.172+p.y*1.010 + shift2.x*1.121)*4.0;
  wave -= sin(p.x*1.00104+p.y*1.005 + shift2.x*1.121)*4.0;
  // ...added by some smaller faster waves...
  wave += sin(p.x*1.02221+p.y*1.01233+shift2.x*3.437)*5.0;
  wave += sin(p.x*1.03112+p.y*1.01122+shift2.x*4.269)*2.5 ;
  wave *= large_waveheight;
  wave -= fbm(p*1.004-shift2*.5)*small_waveheight*24.;
  // ...added by some distored random waves (which makes the water looks like water :)

  float amp = 6.*small_waveheight;
  shift1 *= .3;
  for (int i=0; i<7; i++)
  {
    wave -= abs(sin((noise_2d(p*0.01+shift1)-.5)*3.14))*amp;
    amp *= .61;
    shift1 *= 0.841;
    p *= m2*0.9331;
  }
  
  height += wave;
  return height;
}

float height(vec2 pos, float time) {
	return water(pos, time * 1.5);
//	return (amplitude.x * sin(pos.x * frequency.x + time * time_factor.x)) + (amplitude.y * sin(pos.y * frequency.y + time * time_factor.y));
}

varying float cur_height;

void vertex() {
	VERTEX.y += height(VERTEX.xz, TIME); // sample the height at the location of our vertex
	cur_height = VERTEX.y;
	TANGENT = normalize(vec3(0.0, height(VERTEX.xz + vec2(0.0, 0.2), TIME) - height(VERTEX.xz + vec2(0.0, -0.2), TIME), 0.4));
	BINORMAL = normalize(vec3(0.4, height(VERTEX.xz + vec2(0.2, 0.0), TIME) - height(VERTEX.xz + vec2(-0.2, 0.0), TIME ), 0.0));
	NORMAL = cross(TANGENT, BINORMAL);
}

void fragment() {
	// normal map
	NORMALMAP = texture(texture_normal,UV).rgb;
	NORMALMAP_DEPTH = normal_scale;

	// foam shading with depth buffer
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	depth = depth * 2.0 - 1.0;
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
	depth = depth + VERTEX.z;
	// set albedo based on depth, show foam if shallow
//	if(depth < 0.5) {
//		ALBEDO = vec3((1.0 / depth) / 1.0);
//	} else {
//		ALBEDO = color.rgb * (cur_height * 0.5 + 2.0);
//	} 

	vec2 scaledUV = UV * edge_pattern_scale; 
	
	// Sample the mask
	float channelA = texture(maskSampler, scaledUV - vec2(edgePatternScroll, cos(UV.x))).r; 
	float channelB = texture(maskSampler, scaledUV * 0.5 + vec2(sin(UV.y), edgePatternScroll)).b; 
			
	// Modify it to our liking
	float mask = (channelA + channelB) * 0.95;
	mask = pow(mask, 2);
	mask = clamp(mask, 0, 1);
			
	// Is this pixel in the leading edge?
	if(depthDifference < falloffDistance * leadingEdgeFalloff)
	{
		// Modulate the surface alpha and the mask strength
		float leading = depthDifference / (falloffDistance * leadingEdgeFalloff);
		fragColor.a *= leading;
		mask *= leading;
	}
		
	// Calculate linear falloff value
	float falloff = 1.0 - (depthDifference / falloffDistance) + edgeFalloffBias;
	
	// Color the foam, blend based on alpha
	vec3 edge = edgeFalloffColor.rgb * falloff * edgeFalloffColor.a;
	
	// Subtract mask value from foam gradient, then add the foam value to the final pixel color
	fragColor.rgb += clamp(edge - vec3(mask), 0.0, 1.0);
	
	ALPHA = color.a;
>>>>>>> Stashed changes
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="PlaneMesh" id=3]
material = SubResource( 2 )
size = Vector2( 177.77, 130.81 )
subdivide_width = 150
subdivide_depth = 150

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 4.368
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_normal = ExtResource( 5 )

[sub_resource type="CubeMesh" id=6]
material = SubResource( 5 )

[sub_resource type="SpatialMaterial" id=7]
albedo_texture = ExtResource( 6 )

[sub_resource type="PlaneMesh" id=8]
material = SubResource( 7 )
size = Vector2( 80, 80 )

[node name="Main" type="Spatial"]

[node name="Big Rock" parent="." instance=ExtResource( 1 )]

[node name="Medium Rock" parent="." instance=ExtResource( 2 )]

[node name="Small Rock" parent="." instance=ExtResource( 3 )]

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.570869, 0.821041, 0, -0.821041, 0.570869, 2.07501, 27.9452, 33.0299 )

[node name="Ocean" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.96, 0, 0, 0, 1, 2, 2.11077, 0 )
mesh = SubResource( 3 )
material/0 = null
script = ExtResource( 4 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.416124, 0.909308, 0, -0.909308, 0.416124, 0, 5.77939, 15.1763 )
light_energy = 0.3
shadow_contact = 1.0

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -13.345, 0, 0 )
mesh = SubResource( 6 )
material/0 = null

[node name="CheckeredFloor" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.21407, 0 )
mesh = SubResource( 8 )
material/0 = null

[node name="CheckeredWall" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.126976, -0.991906, 0, 0.991906, 0.126976, 0, -4.21407, -10.6304 )
mesh = SubResource( 8 )
material/0 = null

